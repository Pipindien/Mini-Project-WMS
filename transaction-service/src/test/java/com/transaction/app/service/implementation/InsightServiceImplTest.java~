package com.transaction.app.service.implementation;

import com.transaction.app.client.FingolClient;
import com.transaction.app.client.ProductClient;
import com.transaction.app.client.dto.FinancialGoalResponse;
import com.transaction.app.client.dto.ProductResponse;
import com.transaction.app.dto.insight.InsightResponse;
import com.transaction.app.entity.PortfolioProductDetail;
import com.transaction.app.entity.PortfolioSummary;
import com.transaction.app.repository.PortfolioSummaryRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Arrays;
import java.util.Date;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class InsightServiceImplTest {
    

    private FingolClient fingolClient;
    private ProductClient productClient;
    private PortfolioSummaryRepository portfolioSummaryRepository;
    private InsightServiceImpl insightService;

    @BeforeEach
    void setUp() {
        fingolClient = mock(FingolClient.class);
        productClient = mock(ProductClient.class);
        portfolioSummaryRepository = mock(PortfolioSummaryRepository.class);
        insightService = new InsightServiceImpl();

        insightService.fingolClient = fingolClient;
        insightService.productClient = productClient;
        insightService.portfolioSummaryRepository = portfolioSummaryRepository;
    }

    @Test
    void generateInsight() {
        Long goalId = 1L;
        String token = "token";

        FinancialGoalResponse goalResponse = new FinancialGoalResponse();
        goalResponse.setTargetAmount(10000000.0);
        goalResponse.setTargetDate(Date.from(LocalDate.now().plusMonths(6).atStartOfDay(ZoneId.systemDefault()).toInstant()));

        PortfolioProductDetail product = new PortfolioProductDetail();
        product.setInvestmentAmount(5000000.0);
        product.setProductRate(0.02);

        PortfolioSummary summary = new PortfolioSummary();
        summary.setEstimatedReturn(5000000.0);
        summary.setProductDetails(Arrays.asList(product));

        when(fingolClient.getFinancialGoalById(goalId, token)).thenReturn(goalResponse);
        when(portfolioSummaryRepository.findOneByGoalId(goalId)).thenReturn(Optional.of(summary));

        InsightResponse response = insightService.generateInsight(goalId, token);

        assertNotNull(response);
        assertEquals(goalId, response.getGoalId());
        assertTrue(response.getFutureValue() > 0);
        assertTrue(response.getMonthlyInvestment() >= 0);
    }

    @Test
    void simulateGoalAchievement() {
        Long goalId = 1L;
        double monthlyInvestment = 1000000.0;
        String token = "token";

        FinancialGoalResponse goalResponse = new FinancialGoalResponse();
        goalResponse.setTargetAmount(10000000.0);

        PortfolioProductDetail product = new PortfolioProductDetail();
        product.setInvestmentAmount(5000000.0);
        product.setProductRate(0.02);

        PortfolioSummary summary = new PortfolioSummary();
        summary.setEstimatedReturn(5000000.0);
        summary.setProductDetails(Arrays.asList(product));

        when(fingolClient.getFinancialGoalById(goalId, token)).thenReturn(goalResponse);
        when(portfolioSummaryRepository.findOneByGoalId(goalId)).thenReturn(Optional.of(summary));

        InsightResponse response = insightService.simulateGoalAchievement(goalId, monthlyInvestment, token);

        assertNotNull(response);
        assertEquals(monthlyInvestment, response.getMonthlyInvestment());
        assertTrue(response.getEstimatedMonthToAchieve() > 0);
    }

    @Test
    void simulateProductInvestment() {
        Long productId = 1L;
        double monthlyInvestment = 1000000.0;
        int years = 5;

        ProductResponse product = new ProductResponse();
        product.setProductRate(0.02);

        when(productClient.getProductById(productId)).thenReturn(product);

        InsightResponse response = insightService.simulateProductInvestment(productId, monthlyInvestment, years);

        assertNotNull(response);
        assertEquals(monthlyInvestment, response.getMonthlyInvestment());
        assertEquals(60, response.getEstimatedMonthToAchieve());
        assertTrue(response.getFutureValue() > 0);
    }
}